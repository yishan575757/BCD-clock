/* 
 * Filename: README
 * Name:Yishan Li
 * Userid: cs30xdp
 * Date: 05/09/2018
 * Sources of help: Notes from cse15L
 */

Description
-----------
    This program will print out time the same way as the BCD clock. It wil
represent the decimal value from 0 to 9 in 4 bits from 0000 to 1001. The 
information of time is stored in a unsigned char array, and the hour instead
of being represented in the manner of from 0 to 24, it will use 'a'/'A' or 
'p'/'P' and hour within the range of 1 - 12 to indicate the time.

How to compile
--------------
    In order to compile, for the unit test of the function it will be 'make' 
with the name of test file. For example, to ccompile the unit test for
interpretTime.c, it will be 'make testinterpretTime'. To compile the program,
it will use the command 'make'.

How to run
----------
    In order to run, use the executable name after ./
For unit test, e.g.
  ./testinterpretTime
For the program,
  ./pa2               Print out current time with 8 BCD clock patterns each 
                      with one tick
  ./pa2 n             Print out current time with #n BCD clock patterns each 
                      with one tick
  ./pa2 n ##:##:##a   Print out #n BCD clock patterns each with one tick with 
                      given time

Normal output
-------------
    BCD clock pattern with 'a'/'A' or 'p'/'P' and 'M' surronded and '.' or 'O'
to represent each bit in nibble. Each nibble is printed vertically with tens
before ones, and hour, min, and seconds are separeted by a space char. The 
amount of BCD clock pattern is either defined by the user input or the default
value provided by the program. Without specific time required by the user, the
clock will present with current time. Each pattern of the clock is incremented
with one second.

Abnormal output
---------------
    If there is something wrong with the user input, the usage message will be
printed out ro remaind the user the correct format. And based on the error that
made by the user, an according prompt will be printed out to remaind the user.
If the user is using the help string, the usage message is provided.

Testing
-------
    This program's testing is composed by several unit tests. These unit tests
are used to test the Milestone functions.

Questions
---------
1. I will tell myself it is my responsibility to make sure my work is done by 
   myself but not stealing other's hardwork. And I will try to start early to
   avoid being stressed out.

2. *(arr + 1)

3. without confirmation    :%s/foo/bar/g
   with confirmation       :%s/foo/bar/gc
   to confirm this match   y

4. :split file.txt
   :vsplit file.txt
   Ctrl W, Ctrl W  To switch between files

5. :q!

6. :set list!
   to turn off, repeat the previous command

7. :set nu

8. grep errno main.c
   grep -C 5 errno main.c

9. chmod 777 file.txt   everyone can read write and execute the file
   list -all file.txt
  
10.unix  vi +x file.txt
   vim   :x
